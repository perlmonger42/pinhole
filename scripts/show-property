#!/usr/bin/env ruby
# vim: filetype=ruby

# show-properties
#   Show all the content of all properties on any company in my org
#
# show-properties PR77d21c9d23dd4d17b5eb147086d5e7ff
#   Show all the content of the identified property

require_relative '../pinhole.rb'

ORG_ID = ENV['REACTOR_ORG_ID']
$Verbose = ENV['PINHOLE_VERBOSITY'] =~ /^\d+$/ ? $&.to_i :  0

class Object
  def show(indent)
    self.basic_show(indent)
  end
end

class Array
  def show_list(type, indent)
    if size > 0
      # puts "#{indent}#{type} (#{size})" unless type == 'no heading'
      each { |element| element.show(indent) }
    elsif type != "no heading"
      puts "#{indent}no #{type}"
    end
  end
  def show(indent)
    show_list('unknowns', indent)
  end
end

class Entity
  def display_revision
    rev = data.dig('attributes', 'revision_number')
    rev && rev != '' ? " r#{rev}" : ''
  end

  def display_name
    name && name != '' ? %Q[ "#{name}"] : ''
  end

  def basic_show(indent, extra = nil)
    extra_text = extra && extra != '' ? " #{extra}" : ''
    puts "#{indent}#{id}#{display_revision}#{display_name}#{extra_text}"
  end
end

class Build
  def get_library
    lib_id = data && data.dig('relationships', 'library', 'data', 'id')
    lib_id == '' ? nil : "of #{lib_id}"
  end

  def get_status
    status = data && data.dig('attributes', 'status')
    status == '' ? nil : status
  end

  def at
    time = data.dig('attributres', 'updated_at') || data.dig('attributes', 'created_at')
    time == '' ? nil : "at #{time}"
  end

  def show(indent)
    basic_show(indent, [get_library, get_status, at].compact.join(' '))
  end
end

class Callback
  def show(indent)
    url = data && data.dig('attributes', 'url')
    subs = data && data.dig('attributes', 'subscriptions')
    subscriptions = "#{url}  <=   #{subs}" if url || subs
    basic_show(indent, subscriptions)
  end
end

class Library
  def show(indent)
    basic_show(indent)
    indent += '  '
    resources.show_list('resources', indent)
    builds.show_list('Builds', indent)
  end
end

class Property
  def show(indent)
    basic_show(indent)
    indent += '  '
    libraries.show_list('Libraries', indent)
    rules.show_list('Rules', indent)
    callbacks.show_list('Callbacks', indent)
    extensions.show_list('Extensions', indent)
  end
end

class Rule
  def show(indent)
    basic_show(indent)
    rule_components.show_list('no heading', indent + '  ')
  end
end

def main
  blacksmith = Blacksmith.new
  puts "Server: #{blacksmith}" if $Verbose >= 1
  org = Org.find(blacksmith, id: ORG_ID)

  if ARGV.size > 1
    puts "usage: #{$0} [PROPERTY_ID]"
    exit 1
  elsif ARGV.size > 0 && ARGV[0] !~ /^PR[0-9a-fA-F]{32}$/
    puts "Argument is not a Property ID: #{ARGV[0]}"
    exit 2
  elsif ARGV.size > 0
    property = Property.find(blacksmith, id: ARGV[0])
    properties = [property]
  else
    properties = org.company('ANY').property('ALL')
  end
  properties.show_list('Properties', '')
rescue GenericError => error
  puts "Exception:\n  #{error.to_s}"
end

main
